#!/bin/sh
. "$(dirname ${0})/.prepare"

if [ -z "${1-}" ] || [ ! -f "${1}" ] || [ -z "${2-}" ]; then
  cancel "Syntax: $(basename ${0}) <input> <output>"
fi

find_language() {
  allowed_languages="${1}"
  input_file="${2}"
  [ "${input_file}" ] || cancel "Missing input file."

  ffprobe_output=$(ffprobe -loglevel fatal -show_entries stream=index:stream_tags=language -select_streams a -of compact=p=0:nk=1 "${input_file}") \
    || { return_code="$?"; log "${ffprobe_output}"; return "${return_code}"; }

  languages=$(printf "${ffprobe_output}" | tr \a \n | grep -oP '^\d+\|\K\w+' | sort | uniq)
  if [ -z "${languages}" ]; then
    return 0
  fi
  available_languages=$(printf "${languages}" | xargs | tr ' ' ',')
  if [ "${available_languages#*,}" = "${available_languages}" ]; then
    echo "${languages}"
    return 0
  fi


  for allowed_language in $(echo "${allowed_languages}" | tr ',' '\n'); do
    for available_language in $(echo "${available_languages}" | tr ',' '\n'); do
      if [ "${available_language}" = "${allowed_language}" ]; then
        echo "${available_language}"
        return 0
      fi
    done
  done

  [ "${allowed_languages}" ] && log "None of the requested languages [${allowed_languages}] are available."
  cancel "Please provide at least one of the available languages in env variable MARVYN_AUDIO_LANGUAGES: [${available_languages}]"
}


language=$(find_language "${MARVYN_AUDIO_LANGUAGES}" "${input_fullpath}")
if [ -n "${language}" ]; then
  log "Selected language: ${language}"
fi

#
# first ffmpeg call:
# - if language is available: retain only
#   - the first video and
#   - all streams (video, audio, subtitles, whatever) that match the language
# - otherwise: apply default ffmpeg stream mapping (pick one stream per stream type)
# then create a MKV container and hand over to the second ffmpeg,
# suppressing statistics (so that only statistics of the second call are shown)
#
# second ffmpeg call:
# - configure vaapi to use hardware de- & encoding
#     decoding:
#      * '-hwaccel vaapi': use vaapi to decode input in hardware instead of software
#      * '-hwaccel_device foo' use device 'foo' for decoding
#      * '-hwaccel_output_format vaapi': keep decoded data in hardware (vaapi) format
#     encoding:
#      * 'format=nv12|vaapi,hwupload':
#        accept either hardware (vaapi) format or software (nv12) as input formats for encoding.
#        If 'vaapi': 'hwupload' is a null transformation.
#        If 'nv12':  'hwupload' converts data to 'vaapi'.
#      * '-filter_hw_device foo' and 'scale_vaapi=w=${MARVYN_VIDEO_WIDTH}:h=-1': use hardware encoder to scale
# - take input from stdin
# - pick only the first video stream and the first audio stream, discard all other streams
# - scale to ${MARVYN_VIDEO_WIDTH} width and appropriate height keeping aspect ratio
# - limit video bitrate
# - set audio format to stereo ${MARVYN_AUDIO_CODEC} with audio bitrate
# - if language is available: remove all audio metadata and set audio language
#
ffmpeg \
        -hide_banner \
        -nostats \
        -i "${input_fullpath}" \
        ${language:+-map 0:v -map "0:m:language:${language}"} \
        -c copy \
        -f matroska - \
| ffmpeg \
        -hide_banner \
        -init_hw_device "vaapi=foo:${MARVYN_VAAPI_DEVICE}" \
        -hwaccel vaapi \
        -hwaccel_device foo \
        -hwaccel_output_format vaapi \
        -filter_hw_device foo \
        -i - \
        -map 0:v:0 -map 0:a:0 \
        ${language:+-map_metadata:s:a -1 -metadata:s:a "language=${language}"} \
        -vf  "format=nv12|vaapi,hwupload,scale_vaapi=w=${MARVYN_VIDEO_WIDTH}:h=-1" \
        -c:v "${MARVYN_VIDEO_CODEC}" \
        -maxrate "${MARVYN_VIDEO_MAXRATE:-${MARVYN_VIDEO_BITRATE}}" \
        -b:v "${MARVYN_VIDEO_BITRATE}" \
        -bufsize "${MARVYN_VIDEO_BUFFERSIZE:-$(numfmt --from=auto $(echo "${MARVYN_VIDEO_BITRATE}" | tr [:lower:] [:upper:]) | xargs expr 2 '*')}" \
        -c:a "${MARVYN_AUDIO_CODEC}" \
        -b:a "${MARVYN_AUDIO_BITRATE}" \
        -ac  "${MARVYN_AUDIO_CHANNELS}" \
        "${output_fullpath}"
